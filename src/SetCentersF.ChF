C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c---- Cell center coordinates

      subroutine SETCELLCENTERS(
     &   CHF_FRA[coords],
     &   CHF_CONST_REAL[dx],
     &   CHF_BOX[box])

      integer dir
      integer CHF_AUTODECL[i]
      integer ia(0:CH_SPACEDIM-1)

      CHF_DTERM[
         equivalence(i0, ia(0));
         equivalence(i1, ia(1));
         equivalence(i2, ia(2));
         equivalence(i3, ia(3));
         equivalence(i4, ia(4));
         equivalence(i5, ia(5))]

      do dir = 0, CH_SPACEDIM-1
         CHF_AUTOMULTIDO[box;i]
            coords(CHF_AUTOIX[i], dir) = (ia(dir) + half) * dx
         CHF_ENDDO;
      enddo

      return
      end

c---- Cell center coordinates with dx as a vector

      subroutine SETCELLCENTERSVEC(
     &   CHF_FRA[coords],
     &   CHF_CONST_REALVECT[dx],
     &   CHF_BOX[box])

      integer dir
      integer CHF_AUTODECL[i]
      integer ia(0:CH_SPACEDIM-1)

      CHF_DTERM[
         equivalence(i0, ia(0));
         equivalence(i1, ia(1));
         equivalence(i2, ia(2));
         equivalence(i3, ia(3));
         equivalence(i4, ia(4));
         equivalence(i5, ia(5))]

      do dir = 0, CH_SPACEDIM-1
         CHF_AUTOMULTIDO[box;i]
            coords(CHF_AUTOIX[i], dir) = (ia(dir) + half) * dx(dir)
         CHF_ENDDO;
      enddo

      return
      end

c---- Face coordinates

      subroutine SETFACECENTERS(
     &   CHF_FRA[coords],
     &   CHF_CONST_REAL[dx],
     &   CHF_CONST_INT[faceDir],
     &   CHF_BOX[box])

      integer dir
      integer CHF_AUTODECL[i]
      integer ia(0:CH_SPACEDIM-1)
      real_t coef

      CHF_DTERM[
         equivalence(i0, ia(0));
         equivalence(i1, ia(1));
         equivalence(i2, ia(2));
         equivalence(i3, ia(3));
         equivalence(i4, ia(4));
         equivalence(i5, ia(5))]

      do dir = 0, CH_SPACEDIM-1
         if (dir .eq. faceDir) then
            coef = zero
         else
            coef = half
         endif
         CHF_AUTOMULTIDO[box;i]
            coords(CHF_AUTOIX[i], dir) = (ia(dir) + coef) * dx
         CHF_ENDDO
      enddo

      return
      end

c---- Face coordinates with dx as a vector

      subroutine SETFACECENTERSVEC(
     &   CHF_FRA[coords],
     &   CHF_CONST_REALVECT[dx],
     &   CHF_CONST_INT[faceDir],
     &   CHF_BOX[box])

      integer dir
      integer CHF_AUTODECL[i]
      integer ia(0:CH_SPACEDIM-1)
      real_t coef

      CHF_DTERM[
         equivalence(i0, ia(0));
         equivalence(i1, ia(1));
         equivalence(i2, ia(2));
         equivalence(i3, ia(3));
         equivalence(i4, ia(4));
         equivalence(i5, ia(5))]

      do dir = 0, CH_SPACEDIM-1
         if (dir .eq. faceDir) then
            coef = zero
         else
            coef = half
         endif
         CHF_AUTOMULTIDO[box;i]
            coords(CHF_AUTOIX[i], dir) = (ia(dir) + coef) * dx(dir)
         CHF_ENDDO
      enddo

      return
      end

c---- Node coordinates

      subroutine SETCORNERS(
     &   CHF_FRA[coords],
     &   CHF_CONST_REAL[dx],
     &   CHF_BOX[box])

      integer dir
      integer CHF_AUTODECL[i]
      integer ia(0:CH_SPACEDIM-1)

      CHF_DTERM[
         equivalence(i0, ia(0));
         equivalence(i1, ia(1));
         equivalence(i2, ia(2));
         equivalence(i3, ia(3));
         equivalence(i4, ia(4));
         equivalence(i5, ia(5))]

      do dir = 0, CH_SPACEDIM-1
         CHF_AUTOMULTIDO[box;i]
            coords(CHF_AUTOIX[i], dir) = ia(dir) * dx
         CHF_ENDDO
      enddo

      return
      end

c---- Node coordinates with dx as a vector

      subroutine SETCORNERSVEC(
     &   CHF_FRA[coords],
     &   CHF_CONST_REALVECT[dx],
     &   CHF_BOX[box])

      integer dir
      integer CHF_AUTODECL[i]
      integer ia(0:CH_SPACEDIM-1)

      CHF_DTERM[
         equivalence(i0, ia(0));
         equivalence(i1, ia(1));
         equivalence(i2, ia(2));
         equivalence(i3, ia(3));
         equivalence(i4, ia(4));
         equivalence(i5, ia(5))]

      do dir = 0, CH_SPACEDIM-1
         CHF_AUTOMULTIDO[box;i]
            coords(CHF_AUTOIX[i], dir) = ia(dir) * dx(dir)
         CHF_ENDDO
      enddo

      return
      end
